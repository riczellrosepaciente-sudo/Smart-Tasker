<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Smart Tasker</title>
<style>
:root{
--bg:#0f1724;
--card:#0b1220;
--muted:#94a3b8;
--accent1:linear-gradient(135deg,#7c3aed 0%,#06b6d4 100%);
--glass: rgba(255,255,255,0.03);
--success:#10b981;
--danger:#ef4444;
--radius:14px;
}
*{box-sizing:border-box}
body{
margin:0;
font-family: Inter, sans-serif;
background: var(--bg);
color:#e6eef8;
padding:48px 24px;
display:flex;
align-items:center;
justify-content:center;
transition: all 0.3s ease;
}
.wrap{width:100%;max-width:940px;display:grid;grid-template-columns: 1fr 360px;gap:24px;}
.card{background:linear-gradient(180deg,rgba(255,255,255,0.02),rgba(255,255,255,0.01));
border-radius:var(--radius);padding:22px;box-shadow:0 6px 30px rgba(2,6,23,0.6);}
header.app-head{display:flex;gap:16px;align-items:center;margin-bottom:12px;}
.logo{width:56px;height:56px;border-radius:12px;background:var(--accent1);display:flex;
align-items:center;justify-content:center;font-weight:700;font-size:20px;color:white;}
h1{margin:0;font-size:18px}
p.lead{margin:0;color:var(--muted);font-size:13px}
.input-row{display:flex;gap:12px;margin:18px 0;flex-wrap:wrap;}
.input-field{flex:1;padding:12px 14px;border-radius:12px;background:var(--glass);color:inherit;font-size:14px;min-width:150px;}
.add-btn{padding:10px 14px;border-radius:12px;border:0;background:var(--accent1);color:white;font-weight:600;cursor:pointer;}
.todo-list{display:flex;flex-direction:column;gap:10px;max-height:520px;overflow:auto;padding-right:6px}
.item{display:flex;align-items:center;gap:12px;padding:12px;border-radius:12px;background:rgba(255,255,255,0.012);}
.checkbox{width:18px;height:18px;border-radius:6px;border:2px solid rgba(255,255,255,0.08);cursor:pointer;}
.checkbox.checked{background:var(--success);border-color:transparent}
.task-text{flex:1;word-break:break-word}
.task-text.done{color:rgba(255,255,255,0.45);text-decoration:line-through}
.meta{display:flex;gap:8px;align-items:center}
.small-btn{background:transparent;border:0;color:var(--muted);cursor:pointer;padding:6px;border-radius:8px}
.small-btn:hover{color:white;background:rgba(255,255,255,0.02)}
.sidebar{padding:18px;background:rgba(255,255,255,0.01);border-radius:var(--radius);height:fit-content}
.stat{display:flex;justify-content:space-between;align-items:center;padding:10px;border-radius:10px;background:rgba(255,255,255,0.01);}
.filters{display:flex;gap:8px;flex-wrap:wrap;margin-top:8px}
.filter-btn{padding:8px 10px;border-radius:10px;background:transparent;color:var(--muted);cursor:pointer}
.filter-btn.active{background:rgba(255,255,255,0.03);color:white}
.clear-all{margin-top:14px;padding:10px;border-radius:10px;border:0;background:transparent;color:var(--danger);cursor:pointer}
.empty{padding:36px;text-align:center;color:var(--muted);border-radius:10px;border:1px dashed rgba(255,255,255,0.02)}
.quote{margin-top:12px;font-size:13px;color:#a5b4fc;font-style:italic;text-align:center}

/* Progress bar */
.progress-container{margin-top:12px;}
.progress{height:12px;background:#1f2937;border-radius:8px;overflow:hidden;}
.progress-bar{height:100%;background:var(--success);width:0%;transition:width 0.3s;}

/* Due date colors */
.overdue{border-left:4px solid #ef4444;}
.due-soon{border-left:4px solid #facc15;}
.on-time{border-left:4px solid #10b981;}

/* Themes */
body.light{--bg:#f8fafc;--card:#ffffff;color:#1f2937;}
body.light .task-text.done{color:#9ca3af;}
body.neon{--bg:#0f0f1f;--card:#1a1a2e;--accent1:linear-gradient(135deg,#ff00ff,#00ffff);}

/* Tech Insight Dashboard styles */
.tech-dashboard {
  margin-top: 20px;
  padding: 16px;
  border-radius: var(--radius);
  background: rgba(255,255,255,0.02);
  font-size: 13px;
}
.tech-dashboard h3 {
  margin-top: 0;
  margin-bottom: 10px;
  font-size: 14px;
  color: #a5b4fc;
}
.tech-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 6px;
}
.tech-list li {
  background: rgba(255,255,255,0.03);
  padding: 8px;
  border-radius: 10px;
}
</style>
</head>
<body>
<div class="wrap">
<main class="card">
<header class="app-head">
<div class="logo">ST</div>
<div>
<h1 id="title">SmartTasker</h1>
<p class="lead">Daily goals, deadlines, themes & more üöÄ</p>
</div>
</header>
<section class="input-row">
<input id="taskInput" class="input-field" placeholder="What needs to be done?">
<select id="priorityInput" class="input-field">
<option value="medium">‚≠ê Medium</option>
<option value="high">üî• High</option>
<option value="low">üåôLow</option>
</select>
<input type="date" id="dateInput" class="input-field">
<button id="addBtn" class="add-btn">Add</button>
</section>

<section>
<div style="display:flex;gap:10px;align-items:center;color:var(--muted);font-size:13px;margin-bottom:8px">
<div id="count" style="font-weight:600">0</div><div>tasks</div>
</div>
<div class="progress-container">
<div class="progress"><div id="progressBar" class="progress-bar"></div></div>
<small id="goalText" style="color:var(--muted)"></small>
</div>
</section>

<section>
<div id="todoList" class="todo-list"></div>
<div id="emptyState" class="empty" style="display:none">You're all caught up üéâ</div>
<div id="quoteBox" class="quote"></div>
</section>
</main>

<aside class="sidebar card">
<h3 style="margin:0 0 8px 0">Overview</h3>
<div class="stat"><div>All</div><div id="statAll">0</div></div>
<div class="stat"><div>Active</div><div id="statActive">0</div></div>
<div class="stat"><div>Completed</div><div id="statDone">0</div></div>

<div class="filters">
<button class="filter-btn active" data-filter="all">All</button>
<button class="filter-btn" data-filter="active">Active</button>
<button class="filter-btn" data-filter="done">Completed</button>
</div>

<label style="font-size:13px;color:var(--muted);margin-top:10px;">Daily Goal: <input type="number" id="dailyGoal" style="width:60px;" min="1" value="5"></label>
<button id="clearCompleted" class="clear-all">Clear completed</button>
<button id="resetBtn" class="clear-all" style="color:var(--muted)">Reset</button>

<h4 style="margin-top:20px">Theme</h4>
<button id="themeToggle" class="filter-btn">üåô Dark</button>
<button id="themeLight" class="filter-btn">üåû Light</button>
<button id="themeNeon" class="filter-btn">üåà Neon</button>

<!-- NEW Tech Insight Dashboard -->
<div class="tech-dashboard">
  <h3>üõ† Tech Insight Dashboard</h3>
  <ul class="tech-list" id="techList">
    <!-- Filled dynamically -->
  </ul>
</div>
</aside>
</div>

<script>
(function(){
const STORAGE_KEY = 'elegant-todo:v2';
let tasks = [];
let filter = 'all';

const taskInput = document.getElementById('taskInput');
const priorityInput=document.getElementById('priorityInput');
const dateInput=document.getElementById('dateInput');
const addBtn = document.getElementById('addBtn');
const todoList = document.getElementById('todoList');
const emptyState = document.getElementById('emptyState');
const statAll = document.getElementById('statAll');
const statActive = document.getElementById('statActive');
const statDone = document.getElementById('statDone');
const count = document.getElementById('count');
const clearCompleted = document.getElementById('clearCompleted');
const resetBtn = document.getElementById('resetBtn');
const quoteBox=document.getElementById('quoteBox');
const filterBtns=document.querySelectorAll('.filter-btn[data-filter]');
const progressBar=document.getElementById('progressBar');
const goalText=document.getElementById('goalText');
const dailyGoal=document.getElementById('dailyGoal');

// Themes
document.getElementById('themeToggle').onclick=()=>{document.body.className="";};
document.getElementById('themeLight').onclick=()=>{document.body.className="light";};
document.getElementById('themeNeon').onclick=()=>{document.body.className="neon";};

function uid(){return Math.random().toString(36).slice(2,9)}
function save(){localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks))}
function load(){tasks = JSON.parse(localStorage.getItem(STORAGE_KEY)||'[]')}

function render(){
todoList.innerHTML='';
let visible=tasks;
if(filter==="active") visible=tasks.filter(t=>!t.done);
if(filter==="done") visible=tasks.filter(t=>t.done);
emptyState.style.display = visible.length===0?'block':'none';

visible.sort((a,b)=>priorityRank(b.priority)-priorityRank(a.priority));

visible.forEach(task=>{
const item = document.createElement('div');
item.className='item'; item.dataset.id=task.id; item.draggable=true;

// deadline check
if(task.dueDate){
const today=new Date(); const due=new Date(task.dueDate);
if(due<today && !task.done) item.classList.add("overdue");
else if((due-today)/(1000*60*60*24)<=2 && !task.done) item.classList.add("due-soon");
else item.classList.add("on-time");
}

const cb=document.createElement('div');
cb.className='checkbox'+(task.done?' checked':'');
cb.onclick=()=>{task.done=!task.done; save(); render();};

const txt=document.createElement('div');
txt.className='task-text'+(task.done?' done':'');
txt.textContent=`[${task.priority}] ${task.text}`+(task.dueDate?` (üìÖ ${task.dueDate})`:"");

const meta=document.createElement('div'); meta.className='meta';
const delBtn=document.createElement('button');
delBtn.className='small-btn'; delBtn.textContent='üóëÔ∏è';
delBtn.onclick=()=>{tasks=tasks.filter(t=>t.id!==task.id); save(); render();};
meta.append(delBtn);

item.append(cb,txt,meta);
todoList.appendChild(item);
});
updateStats();
}

function priorityRank(p){return p==="high"?3:(p==="medium"?2:1);}

function updateStats(){
statAll.textContent=tasks.length;
statActive.textContent=tasks.filter(t=>!t.done).length;
statDone.textContent=tasks.filter(t=>t.done).length;
count.textContent=tasks.length;

// progress bar
let goal=parseInt(dailyGoal.value)||1;
let done=tasks.filter(t=>t.done).length;
let pct=Math.min(100,(done/goal)*100);
progressBar.style.width=pct+"%";
goalText.textContent=`${done}/${goal} tasks completed today`;
}

addBtn.onclick=addTask;
taskInput.onkeydown=e=>{if(e.key==='Enter') addTask();};
function addTask(){
const text=taskInput.value.trim(); if(!text) return;
tasks.unshift({id:uid(),text,done:false,priority:priorityInput.value,dueDate:dateInput.value});
save(); render();
taskInput.value=''; dateInput.value="";
}

clearCompleted.onclick=()=>{tasks=tasks.filter(t=>!t.done); save(); render();};
resetBtn.onclick=()=>{tasks=[]; save(); render();};

filterBtns.forEach(btn=>{btn.onclick=()=>{filter=btn.dataset.filter; filterBtns.forEach(b=>b.classList.remove("active")); btn.classList.add("active"); render();}});

load(); render();

/* ---------------------------
 * TECH INSIGHT DASHBOARD
 * --------------------------- */
const techList = document.getElementById('techList');
const insights = [
  "‚úîÔ∏è LocalStorage Pattern (saving tasks offline)",
  "‚úîÔ∏è MVC-like Separation (render, state, actions)",
  "‚úîÔ∏è Modular Functions (addTask, updateStats, render)",
  "‚úîÔ∏è Event-Driven Programming (onclick, keypress)",
  "‚úîÔ∏è Responsive Layout (CSS Grid & Flexbox)",
  "‚úîÔ∏è Theme Switcher (Dark / Light / Neon)"
];
techList.innerHTML = insights.map(i=>`<li>${i}</li>`).join("");

})();
</script>
</body>
</html>
